// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(cuid())
    name     String?
    nickname String?
    bio      String?
    avatar   String?

    // github token info for github sync
    ghToken                 String?
    ghRefreshToken          String?
    ghTokenExpiresAt        String?
    ghRefreshTokenExpiresAt String?

    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    spaces        Space[]
    docs          Doc[]
    member        Member[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Doc {
    id          String   @id @default(cuid())
    title       String?  @db.Text
    description String?  @db.Text
    content     String   @db.Text
    slug        String   @default(cuid())
    synced      Boolean  @default(false) // is synced to github
    image       String?  @default("") @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    published   Boolean  @default(false)

    space   Space?  @relation(fields: [spaceId], references: [id])
    spaceId String?

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@index([spaceId])
    @@index([userId])
}

model SharedDoc {
    id          String   @id @default(cuid())
    title       String?  @db.Text
    content     String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Space {
    id             String   @id @default(cuid())
    name           String?
    description    String?  @db.Text
    catalogue      String?  @db.Text
    logo           String?  @default("") @db.Text
    image          String?  @default("") @db.Text
    subdomain      String?  @unique
    customDomain   String?  @unique
    homePageId     String?
    isPrivate      Boolean  @default(false)
    coverURL       String?
    repo           String?
    installationId Int? // github app installationId
    docDir         String?
    branch         String?
    syncStrategy   String? // commit/pr
    isMDX          Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    docs    Doc[]
    members Member[]

    @@index([userId])
}

model Page {
    id          String    @id @default(cuid())
    spaceId     String
    title       String
    description String?   @db.Text
    pathname    String
    redirect    String?
    content     String    @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
}

model Theme {
    id           String   @id @default(cuid())
    spaceId      String
    userId       String
    name         String
    introduction String?  @db.Text
    isPrivate    Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Template {
    id          String   @id @default(cuid())
    name        String
    description String?  @db.Text
    content     String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Member {
    id        String    @id @default(cuid())
    roleType  String?
    deletedAt DateTime?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    space   Space?  @relation(fields: [spaceId], references: [id])
    spaceId String?
}

model InvitationToken {
    id        String    @id @default(cuid())
    userId    String
    spaceId   String
    roleType  String?
    token     String?
    deletedAt DateTime?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}
